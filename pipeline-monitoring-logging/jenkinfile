pipeline {
    agent {
        label 'agent-eiei'
    }

    environment {
        AZURE_SP             = credentials('azure-service-principal')
        SSH_PUBLIC_KEY       = credentials('admin-ssh-public-key')
        SSH_PRIVATE_KEY_CRED = 'ansible-vm-ssh-key'
        ANSIBLE_DIR          = 'pipeline-monitoring-logging/ansible'
        TERRAFORM_DIR        = 'pipeline-monitoring-logging/terraform'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git url: 'https://github.com/wuttipat6509650716/InternSCBTechX_Practice.git', branch: 'main'
            }
        }

        stage('Azure Login') {
            steps {
                sh '''
                az login --service-principal \
                         --username "$AZURE_SP_CLIENT_ID" \
                         --password "$AZURE_SP_CLIENT_SECRET" \
                         --tenant "$AZURE_SP_TENANT_ID"

                az account set --subscription "$AZURE_SP_SUBSCRIPTION_ID"
                '''
            }
        }

        stage('Terraform Init') {
            steps {
                dir(env.TERRAFORM_DIR) {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir(env.TERRAFORM_DIR) {
                    sh 'terraform plan -var="ssh_public_key=$SSH_PUBLIC_KEY" -out=tfplan'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir(env.TERRAFORM_DIR) {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }
                
        stage('Install Ansible Collections') {
            steps {
                sh 'ansible-galaxy collection install community.docker'
            }
        }

        stage('Generate Dynamic Ansible Inventory') {
            steps {
                dir(env.TERRAFORM_DIR) {
                    script {
                        def publicIp = sh(script: "terraform output -raw public_ip_address", returnStdout: true).trim()
                        def inventoryContent = "[all]\n${publicIp} ansible_user=azureuser ansible_ssh_private_key_file=${env.WORKSPACE}/.ssh_vm_key\n"
                        writeFile file: "${env.WORKSPACE}/${env.ANSIBLE_DIR}/hosts", text: inventoryContent
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: env.SSH_PRIVATE_KEY_CRED, keyFileVariable: 'SSH_KEY')]) {
                    sh '''
                    cp "$SSH_KEY" $WORKSPACE/.ssh_vm_key
                    chmod 600 $WORKSPACE/.ssh_vm_key

                    export ANSIBLE_HOST_KEY_CHECKING=False
                    ansible-playbook -i ${ANSIBLE_DIR}/hosts ${ANSIBLE_DIR}/starter.yml
                    '''
                }
            }
        }
    }
}